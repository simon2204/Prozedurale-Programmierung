//
//  main.swift
//  Heap
//
//  Created by Simon Sch√∂pke on 24.01.21.
//

import Foundation

var unsorted = "phnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdiphnjabcgdi".cString(using: .utf8)!


var sorted = [CChar]()
sorted.reserveCapacity(10000)

let begin = clock()
var heap = Heap2<CChar>(capacity: unsorted.count)

for i in 0..<unsorted.count {
    heap.insert(&unsorted[i])
}

var element = UnsafeMutablePointer<CChar>.allocate(capacity: 1)

while heap.extractMin(&element) {
    sorted.append(element.pointee)
}

heap.dealloc()

let end = clock()

let timeSpent = end - begin

print(timeSpent)

//print(sorted)

var i1: CChar
var i2: CChar

let compareCallback: HEAP_ELEM_COMP = {
    i1 = $0!.load(as: CChar.self)
    i2 = $1!.load(as: CChar.self)
      if i1 < i2 {
        return -1
      }
      if i1 > i2 {
        return 1
      }
      return 0
}

let printCallback: HEAP_ELEM_PRINT = {
    let i1 = $0!.load(as: CChar.self)
    print(i1)
}

var result = Array<CChar>()
result.reserveCapacity(6000)

let begin2 = clock()

heap_init(compareCallback, printCallback)

for i in 0..<unsorted.count {
    heap_insert(&unsorted[i])
}

let min = UnsafeMutablePointer<UnsafeMutableRawPointer?>.allocate(capacity: 1)

while (heap_extract_min(min)) {
    result.append(min.pointee!.load(as: CChar.self))
}

heap_destroy()

let end2 = clock()

let timeSpent2 = end2 - begin2

print(timeSpent2)

//print(result)
